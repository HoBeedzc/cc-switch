name: Release

on:
  push:
    tags:
      - 'v*.*.*'

permissions:
  contents: write
  packages: write

jobs:
  build:
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.version.outputs.version }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: '1.23'

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          registry-url: 'https://registry.npmjs.org'

      - name: Extract version
        id: version
        run: echo "version=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT

      - name: Build binaries
        run: |
          # 创建输出目录
          mkdir -p bin
          
          # 构建不同平台的二进制文件
          GOOS=linux GOARCH=amd64 go build -o bin/cc-switch-linux-amd64 .
          GOOS=linux GOARCH=arm64 go build -o bin/cc-switch-linux-arm64 .
          GOOS=darwin GOARCH=amd64 go build -o bin/cc-switch-darwin-amd64 .
          GOOS=darwin GOARCH=arm64 go build -o bin/cc-switch-darwin-arm64 .
          GOOS=windows GOARCH=amd64 go build -o bin/cc-switch-windows-amd64.exe .
          GOOS=windows GOARCH=arm64 go build -o bin/cc-switch-windows-arm64.exe .
          
          # 创建默认的可执行文件 (用于npm包)
          cp bin/cc-switch-linux-amd64 bin/cc-switch

      - name: Create archives
        run: |
          cd bin
          # 为每个平台创建压缩包
          tar -czf cc-switch-linux-amd64.tar.gz cc-switch-linux-amd64
          tar -czf cc-switch-linux-arm64.tar.gz cc-switch-linux-arm64
          tar -czf cc-switch-darwin-amd64.tar.gz cc-switch-darwin-amd64
          tar -czf cc-switch-darwin-arm64.tar.gz cc-switch-darwin-arm64
          zip cc-switch-windows-amd64.zip cc-switch-windows-amd64.exe
          zip cc-switch-windows-arm64.zip cc-switch-windows-arm64.exe

      - name: Update package.json version
        run: |
          # 从git tag提取版本号（去掉v前缀）
          VERSION=${GITHUB_REF#refs/tags/v}
          npm version $VERSION --no-git-tag-version

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: binaries
          path: |
            bin/
            package.json

  github-release:
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: binaries
          path: bin/

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ needs.build.outputs.version }}
          name: Release ${{ needs.build.outputs.version }}
          draft: false
          prerelease: false
          generate_release_notes: true
          files: |
            bin/*.tar.gz
            bin/*.zip
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  npm-release:
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          registry-url: 'https://registry.npmjs.org'

      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: binaries
          path: bin/

      - name: Make binaries executable
        run: chmod +x bin/*

      - name: Publish to NPM
        run: npm publish --access public
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
